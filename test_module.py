try:
    # переводится как "попытка"
    # блок try помещается код, который мы хотим проверить на наличие ошибок. Этот блок исполняется до тех пор, пока не возникает ошибка
    # здесь код с возможной ошибкой
    pass
except:
    # переводится как "кроме"
    # здесь блок кода в случае возникновения ошибки
    # блок except помещается код, который будет выполнен в случае возникновения ошибки в блоке try
    pass

# Механизм работы блоков try и except заключается в следующем:
# 1) В блоке try выполняется код, который может потенциально вызвать ошибку.

# 2) Если в одной из строк кода внутри блока try возникает ошибка, интерпретатор немедленно прекращает выполнение этого блока и генерирует исключение.

# 3) Это исключение "переносится" в блок except, который предназначен для обработки ошибок.
# Важно отметить, что строка кода, вызвавшая ошибку, не будет выполнена, а выполнение программы перейдёт в блок except.

# 4) В блоке except мы можем либо вывести сообщение для пользователя, либо выполнить другое действие, связанное с обработкой ошибки,
# чтобы программа продолжила работу без критического сбоя.

try:
    i = 0
    print(10 / i)
    print('Готово')
except:
    print('На ноль делить нельзя')


### В блоке except лучше сразу указывать название класса ошибки, если мы знаем какая ошибка у нас возникла.
try:
    i = 0
    print(10 / i)
    print('Готово')
except ZeroDivisionError: # указываем название класса ошибки
    print('На ноль делить нельзя')

# В то же время в коде может быть несколько ошибок. Как с ними работать?
# Перечислять сразу несколько классов сразу в один блок except.
try:
    truba = a + b
    truba = 10/0
except (ZeroDivisionError, NameError): # указываем название класса ошибки
    print('Что то не так, но мы справились')
# Исключение мы обработали и перехватили, но какое именно мы пока не можем понять, так как для одного блока except мы перечислили сразу несколько классов ошибок.
# Если будут вызываться эти классы, то будет выполняться именно этот блок except
try:
    truba = a + b
    truba = 10/0
except ZeroDivisionError as exc:
    # exc(сокращенно от except)
    # есть возможность сохранить название класса ошибки в переменную и вывести ее в консоль, то есть не запоминать к какой ошибке
    # относится какой блок кода, а сразу же вывести разработчику или пользователю какая ошибка у нас возникает.
    print(f'Нельзя делить на ноль. Ошибка: {exc}')
except NameError as exc:
    print(f'Нет такой переменной. Ошибка: {exc}'),

# Блок else
# Блок else выполняется только в том случае, если в блоке try не возникло ошибок.
# Он не является обязательным, но может быть полезен, если необходимо выполнить конкретный код в случае успешного выполнения блока try.
# Таким образом, если ошибок не произошло, выполняется код в блоке else.
###
# Блок finally
# Блок finally выполняется всегда, независимо от того, сработал ли блок else или except.
# Это означает, что код в блоке finally будет выполнен в любом случае, даже если в блоке try возникла ошибка.
# Блок finally обычно используется для выполнения завершающих операций, таких как закрытие файлов или освобождение ресурсов,
# что гарантирует их выполнение независимо от результата выполнения основного кода.

i = int(input('Введите число: '))

try: # перевод
    result = 10 * (1/i)
except ZeroDivisionError as exc: # перевод
    print(f'На ноль делить нельзя. Ошибка: {exc}')
else: # перевод
    print(result)
finally: # перевод
    print('Если все прошло успешно, то вы получили ответ. Если нет, то вы получили ошибку.')

print('-------------------------------------------------')

# DZ 32
def add_everything_up(a, b):
    try:
        result = a + b
    except TypeError as exc:
        print(f'Ваши данные: {a},{b}. Ошибка: {exc}.')
    else:
        print(result)
    finally:
        return f'Если вы все сделали правильно, то вы получили ответ, если нет, то вы получили ошибку.'

print(add_everything_up(123.456, 'строка'))
print(add_everything_up('яблоко', 4215))
print(add_everything_up(123.456, 7))



